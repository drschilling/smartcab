import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator


class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)  # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning  # Whether the agent is expected to learn
        self.Q = dict()  # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon  # Random exploration factor
        self.alpha = alpha  # Learning factor
        self.num_trials = 1  # number of trials
        self.level_of_tolerance = 0.5 # exploration/learning level of tolerance

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        if testing:
            self.alpha = 0.0
            self.epsilon = 0.0
        else:
            self.epsilon = 0.9975 ** (self.num_trials + 2)
            self.alpha = 1.0 / math.log(self.num_trials + 2)

        self.num_trials += 1

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint()  # The next waypoint
        inputs = self.env.sense(self)  # Visual input - intersection light and traffic

        state = (inputs['light'], inputs['oncoming'], waypoint)

        return state

    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        maxQ = self.Q[str(state)].values()

        return maxQ

    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        if self.learning:
            if str(state) in self.Q:
                self.Q = self.Q
            else:
                self.Q[str(state)] = {}
                for x in range(len(self.valid_actions)):
                    self.Q[str(state)].update({str(self.valid_actions[x]): 0.0})
        else:
            self.Q = None

        return

    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        self.q_value = self.get_maxQ(state)

        if self.learning:
            if random.uniform(self.level_of_tolerance, 1.0) < self.epsilon:
                action = random.choice(self.env.valid_actions)
            else:
                max_selection = self.q_value.count(max(self.q_value))
                if max_selection > 1:
                    index = random.choice([index for index in range(len(self.q_value))
                                           if self.q_value[index] == max(self.q_value)])
                    action = self.env.valid_actions[index]
                    action = None if action == 'None' else action
                else:
                    action = max(self.Q[str(state)], key=self.Q[str(state)].get)
                    action = None if action == 'None' else action
        else:
            action = random.choice(self.env.valid_actions)

        return action

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        if self.learning:
            self.q_value = ((1 - self.alpha) * self.Q[str(state)][str(action)] + (reward * self.alpha))
            self.Q[str(state)][str(action)] = self.q_value
        else:
            self.Q = self.Q

        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()  # Get current state
        self.createQ(state)  # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action)  # Receive a reward
        self.learn(state, action, reward)  # Q-learn

        return


def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.01, display=False, log_metrics=True, optimized=True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=50)


if __name__ == '__main__':
    run()
